'''
    This module is for create volcano KML function
    
'''

import csv #WHY DO YOU NEED TO IMPORT THE CSV? ALL TIMES YOU ARE WORKING WITH TABLES YOU NEED TO DO IT?
#Y: there is same function in csv lib i used it to read csv files , every time you need to use csv function (like reading the table ) you need to import this lib
import os #WHY DO YOU NEED TO IMPORT OS? ONLY IN CASE THE USER IS WITH A DIFFERENT OPERATIONAL SYSTEM?
#Y: again there is same function in os lib i used it , like path function to find the path (not WITH A DIFFERENT OPERATIONAL SYSTEM) its lib 

'''
The so-called CSV (Comma Separated Values) format is the most common import and export format for spreadsheets and databases.
CSV format was used for many years prior to attempts to describe the format in a standardized way in RFC 4180.
The lack of a well-defined standard means that subtle differences often exist in the data produced and consumed by different applications.
These differences can make it annoying to process CSV files from multiple sources.
Still, while the delimiters and quoting characters vary, the overall format is similar enough that it is possible to write a single module
which can efficiently manipulate such data, hiding the details of reading and writing the data from the programmer.
The csv module implements classes to read and write tabular data in CSV format.
It allows programmers to say, “write this data in the format preferred by Excel,” or “read data from this file which was generated by Excel,
” without knowing the precise details of the CSV format used by Excel. Programmers can also describe the CSV formats understood by other
applications or define their own special-purpose CSV formats.
The csv module’s reader and writer objects read and write sequences.
Programmers can also read and write data in dictionary form using the DictReader and DictWriter classes.
'''

''' 
    This function that can be with:
    three compulsory arguments (sourcefile , destinationfile ,listTitle,)
    and three optional arguments( Volcano location,status,and type)
    if any optional arguments not presented all possible option will be taken in account  
   
'''

def createVolcanoKML(sourcefile,destinationfile,listTitle,Vlocation=None,Vstatus=None,Vtype=None): #WHY DO I NEED TO PUT THIS NONE HERE AFTER THE OPTIONAL ARGUMENTS?
    
    #check the input before  - WHY DO I NEED TO CHECK THE INPUT BEFORE ?
    # Y: just to make sure the use will not inter wrong input (if so the program will crash ) 
    #ALL OF THIS IS REALLY IMPORTANT? WHAT I CAN REMOVE WITHOUT CHANGE THE CODE?
    
    st=  type('str') #STR IS A VARIABLE THAT IS A STRING 
    if (type(sourcefile)!=st or type(destinationfile)!=st or type(listTitle)!=st ): #IF THE SOUCEFILE, THE DESTINATIONFILE OR THE LISTTITEL ARE NOT STRING THERE WILL BE AN ERROR
        print('Error: The Input should be string, between single or double quotation marks') #IF THIS HAPPEN THE ERROR WILL PRINT THIS PHRASE
    elif os.path.isfile(destinationfile): #IS THIS REALLY NECESSARY?
        # Y: this is to prevent OVERWRITE the destination file
        print('Error: The destination file already exist.')
    elif not os.path.isfile(sourcefile): #IS THIS REALLY NECESSARY?
        #Y: its just to check if the file do exist (if you remove it and the file not exist the program will crash)
        print ('Error: The source file is not available, or not in the source folder')
    else:
        s_len=len(sourcefile)
        d_len=len(destinationfile)
        if not sourcefile[s_len-4:s_len].lower() == '.csv': # WHY THE LENGHT IS IMPORTANT IN THIS PART?
            # Y: this to check last 4 charicter from the name to check the "file extintion"
            print ('Error: The source file should be .csv file.')
        elif not destinationfile[d_len-4:d_len].lower() == '.kml':
            print('Error: The destination file should end with (.kml).')
        else:
            GOcreateVolcanoKML(sourcefile,destinationfile,listTitle,Vlocation,Vstatus,Vtype)
    
        
        
    
    
def GOcreateVolcanoKML(sourcefile,destinationfile,listTitle,Vlocation,Vstatus,Vtype):
    
   
    # check the optional arguments and set Parameters For General Description use
    #I DID NOT UNDERSTAND WHY TO USE THIS, THE LOGIC OF THE STRUCTURE
    # Y: the folloing three "if statements " if make flag that when the use pass NONE to function it make take ALL (all location ot all states or alll types)
    if Vlocation == None:
        allLocations = True
        d_loc = 'All Location' # For General Description use 
    else:
        allLocations=False
        d_loc= Vlocation
        
    if Vstatus == None:
        allStatus = True
        d_stt = 'All ' # For General Description use
    else:
        allStatus=False
        d_stt= Vstatus
        
    if Vtype == None:
        allType = True
        d_typ = "All " # For General Description use
    else:
        allType=False
        d_typ= Vtype
        
    # the General Description set
    gen_desc= 'This map contain a selection of volcanos in %s, with %s status, and %s type.' \
                    % (d_loc, d_stt, d_typ)            #REPLACE THE VARIABLES WHERE THERE IS % 
    
    
    # create kmlFile  class instant #WHY DO WE NEED TO CREATE THIS CLASS INSTANT?
    # Y: evry time we need to use the class we have to create instant of it , and work on that instant 
    kmlfile = KMLFile(listTitle,gen_desc)
    
    csvLno=0 # this is a counter to be used as line number for csv file #TO START IN THE LINE ZERO IN THE CSV FILE 
    
    # read the CSV file that contain volcanos informations
    with open(sourcefile) as vol_data:
        read_vols = csv.reader(vol_data, delimiter=';')  
        # choose the delimiter depend on the CSV file, ( here they use ';' for separation)
        for volInfo in read_vols:
            if volInfo[0] == 'NAME': # for first line contain the title of the table only # I DO NOT UNDERSTAND THIS STRUCTURE
                #Y: because the first line in csv file is just discrption (like NAME , TYPE ... ) so we skip this line here if it exsit 
                csvLno +=1 #READ THE SEQUENCE OF LINES 
            else:
                csvLno +=1  
                # this following (if, else) statements for check location, Status, and type 
                # of volcano if it's needed to be add to KML file  
                if allLocations:
                    if allStatus:
                        if allType:
                            kmlfile.addVol(volInfo,csvLno) #CAN YOU EXPLAIN THIS STRUCTURE TO ME ?
                            #Y: here we send the volcano to method call addVol in the class (to add this volcano to KML file )
                        else:
                            if volInfo[8] == Vtype: #WHY IS THIS NUMBER 8?
                                #Y: the colume 8 is for types 
                                kmlfile.addVol(volInfo,csvLno) #CAN YOU EXPLAIN THIS STRUCTURE TO ME ?
                                #Y: here we send the volcano to method call addVol in the class (to add this volcano to KML file )
                    else:
                        if volInfo[2] == Vstatus:
                            if allType:
                                kmlfile.addVol(volInfo,csvLno)
                            else:
                                if volInfo[8] == Vtype:
                                    kmlfile.addVol(volInfo,csvLno)
                else: #WHY THIS ELSE GO BACK < MORE THAN THE OTHERS
                    # Y: this else is for the if that in the same alignment
                    if volInfo[1] == Vlocation:
                        if allStatus:
                            if allType:
                                kmlfile.addVol(volInfo,csvLno)
                            else:
                                if volInfo[8] == Vtype:
                                    kmlfile.addVol(volInfo,csvLno)
                        else:
                            if volInfo[2] == Vstatus:
                                if allType:
                                    kmlfile.addVol(volInfo,csvLno)
                                else:
                                    if volInfo[8] == Vtype:
                                        kmlfile.addVol(volInfo,csvLno)
                                        
                                         
                
                # END, volcano to be add to KML file
    
    
    # Create the KML file  
    if not kmlfile.ffile == []: # CAN YOU EXPLAIN THIS STRUCTURE TO ME?
        kmlf=open(destinationfile,'w') #TO CREATE 'W' A NEW FILE (( Y: W mean write on the file, and open will create the file if its exist )) 
        kmlf.write(kmlfile.ffile) #CAN YOU EXPLAIN THIS STRUCTURE TO ME ?
        # Y: write the value of varible ffile in the instant kmlfile to kmlf that we creete in the before
        kmlf.close() 
                
        nVadded = len(kmlfile.voladdList)#CAN YOU EXPLAIN WHY THIS IS HERE TO ME?
        #Y: this the list of volcano created , here we find the number of the volcano to print it in the next line
        print('KML file created with name "%s", include %d volcanos.' % (destinationfile, nVadded))

    else:
        print('There is no volcano to be add to the list!!!, kml file not create.')
    
    # finishing indicator (( print function can be canceled)) #PRINT FUNCTION CAN BE CANCELLED ONLY HERE?
    # Y: the last two print, one of them will print , if the function create the file or not ,, so its better to keep it to know when the function finish
    #     but if you use this finuction in anather code maybe you do need it to print out 
 
'''
this is the class to be used by the function
'''
'''
======IMPORTANT========
'''



#FOR THE CLASS I REALLY DON'T KNOW ANYTHING, COULD YOU EXPLAIN ME THE STRUCTURES? CAN YOU ALSO INDICATE ME SOME LECTURES?
#Y: https://www.youtube.com/watch?v=b9wfg-oXAKU
#Y: this class is the basic block for the function
class KMLFile: 
                
    fileCode0='''<?xml version="1.0" encoding="utf-8"?>
<kml xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://earth.google.com/kml/2.1">
<Document>
<name>'''
    Title=[] # come from the user (ex:Stratovolcanos in Greece)
    fileCode1='''</name>
<description>'''
    Gen_description=[] #This map contains a selection of volcanos.
    fileCode2='''</description>
<Placemark>
<name>'''
    Vname=[] # read from csv when  apply addVol sub-function 
    fileCode3='''</name>
<description>'''
    description=[] # contain status , types, and elev of volcano (read from csv when  apply addVol sub-function)
    fileCode4='''</description>
<Point><coordinates>'''
    lon =[] # 24.44
    comma=''','''     # DONT forget comma
    lat =[] # 36.699
    fileCode5='''</coordinates></Point>
</Placemark>
</Document>
</kml>'''
    
    ffile=[]
    FVol = True
    voladdList=[]
    
    # Class methods  #CAN YOU PLEASE EXPLAIN ME THIS STRUCTURE?
    # Y: this is hte initional method in the class when you create instant of the class this will run automaticlly 
    def __init__(self, Tit, gen_des):
        self.voladdList=[]
        self.Title=Tit
        self.Gen_description=gen_des
        
        
    def addFVol(self,Vinfo=None): #WHAT MEANS THIS 'SELF'?
        # Y: its pyhtin logic , it mean this methond is inside the class , where you can use parameter self as the class instant inside the class method only
        # this method to create first volcano with full kml file 
                        
        # inserting information of volcano
        self.Vname=Vinfo[0]
        self.description='Volcano of type %s, status of  %s, and have elevation of %s'%\
                             (Vinfo[8] , Vinfo[2] , Vinfo[7]) #FROM WHERE DID YOU GET THESE POSITIONS 8, 2 AND 7?
        #Y: these position is in the csv file ( i can make it read it from the csv it self but i need to make anather function to do that ), so i do it manually 

'''

============================================
============================================
============================================
I COULDN'T CHECK FURTHER THAN THIS TODAY (17/06)
PLEASE IF POSSIBLE ANSWER MY OTHER QUESTIONS AND I WILL TRY TO
PASS THROUGH THE REST OF THE CODE TOMORROW
Y : ok , i write what i can exaplain shortly , i hope do it right , 
============================================
============================================
============================================

'''


        
        # longitude of the volcano in degrees; positive for 
        #  the Eastern hemisphere and negative for the Western hemisphere.
        if Vinfo[6] == 'W':
            self.lon = '-'+Vinfo[5]
        elif Vinfo[6].upper() == 'E':
            self.lon=Vinfo[5]
        else:
            print('Longitude: Hemisphere direction: not correct entry, '),
            return 0
        
        # latitude of the volcano in degrees; positive for the Northern hemisphere 
        #  and negative for the Southern hemisphere.
        if Vinfo[4] == 'S':
            self.lat = '-'+Vinfo[3]
        elif Vinfo[4].upper() == 'N':
            self.lat=Vinfo[3]
        else:
            print('Latitude: Hemisphere direction: not correct entry, '),
            return 0
        
        
        #create string (file text) to be save as kml file
        self.ffile=(self.fileCode0+self.Title+self.fileCode1+self.Gen_description+
                    self.fileCode2+self.Vname+self.fileCode3+self.description+self.fileCode4+
                    self.lon+self.comma+self.lat+self.fileCode5)
        return 1
    
    
    def addVol(self,Vinfo=None, csvLineNo=None):
        
        addnewvolcano = self.addnVol(Vinfo)
        if not addnewvolcano:
            print("this volcano (on line %d) in csv file did not added to KML file." %csvLineNo)
                    
                            
    def addnVol(self, Vinfo): 
        
        # basic check of the value of info presented for volcano 
        if Vinfo == None:
            print 'Warning: No info for the volcano, ',
            return 0
        
        if len(Vinfo) != 9:
            print 'Warning: The info not complete, ',
            return 0
        
        # check if the volcano if it is replicated
        for voladded in self.voladdList:
            if Vinfo == voladded:
                print 'Warning: The volcano replicated, ',
                return 0
         
        self.voladdList.append(Vinfo)   
         
        if self.FVol: # to create first building block of KML file 
            fvx = self.addFVol(Vinfo)
            if fvx == 1:
                self.FVol = False
                
            return fvx
        else: 
            # adding new volcano to kml file that exist  
            
            # find the index where the new volcano to be added 
            addIndex = self.ffile.find('</Placemark>') + len('</Placemark>') 
            # divide the file to two to add the new volcano between 
            b = self.ffile[0:addIndex] # the begin of the text file
            e = self.ffile[addIndex:] # the end of the text file
            
            # description for new volcano
            nV_des='Volcano of type %s, status of  %s, and have elevation of %s'%\
                             (Vinfo[8] , Vinfo[2] , Vinfo[7])
                             
            # longitude of the volcano in degrees; positive for 
            #  the Eastern hemisphere and negative for the Western hemisphere.
            if Vinfo[6] == 'W':
                nlon = '-'+Vinfo[5]
            elif Vinfo[6].upper() == 'E':
                nlon=Vinfo[5]
            else:
                print('Longitude: Hemisphere direction: not correct entry, '),
                return 0
        
            # latitude of the volcano in degrees; positive for the Northern hemisphere 
            #  and negative for the Southern hemisphere.
            if Vinfo[4] == 'S':
                nlat = '-'+Vinfo[3]
            elif Vinfo[4].upper() == 'N':
                nlat=Vinfo[3]
            else:
                print('Latitude: Hemisphere direction: not correct entry, '),
                return 0
            # text of new volcano
            newV='\n<Placemark>\n<name>'+Vinfo[0]+'</name>\n<description>'+nV_des+\
                    '</description>\n<Point><coordinates>'+nlon+','+nlat+\
                        '</coordinates></Point>\n</Placemark>'
            
            # reconstruction of ffile (kml file) with the new volcano
            self.ffile=b+newV+e
            return 1 
        
